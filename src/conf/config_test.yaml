defaults:
  - task: reacher
  - agent: pred_agent
  - policy: snn_policy
  - transition: snn_transition
  - logging: logging
  - _self_

seed: 42
experiment: test
device: cuda

model:
  num_layers: 2
  num_rec_layers: 1
  time:
    dt: 0.002
    tau_mem: 0.02
    tau_syn: 0.01
  activation:
    type: sigmoidspike
    beta: 25
  connection:
    n_dims: null
    latent_bias: false
  hidden_dim: 500
  initializer:
    alpha: 0.8
    mu_u: 0.0
    sigma_u: 1.0
    nu: 50
    bias_scale: 1.0
    bias_mean: 0.0
    scaling: 1
  encoder:
    #- type: identity  # this is also added when the list is empty
    - type: ${run.encoder1}
    - type: ${run.encoder2}
    #- type: linear
    #- type: rbf
    #  kwargs:
    #    num_centers: 2
    #    sigma_scale: 0.5
    #    learn_sigma: false
  input:
    scaling: 0.5
    learn_scaling: true

optimizer:
  type: adam
  params:
    lr: 0.002

LowerBoundL2:
  strength: 0.001
  threshold: -20
  basis: mem
  dims: null   # null means per neuron, 1 means avg per layer
UpperBoundL2:
  strength: 0.001
  threshold: 0.3
  basis: out
  dims: null
transition:
  wl2: 0.0
policy:
  wl2: 0.0

run:
  encoder1: identity
  encoder2: identity
  load_dir: null
  prediction_unroll: 20
  eval_first: true
  early_stop_metric: "test average steps on target"
  early_stop_patience: 0
  early_stop_mode: "max"
  lr_decay: 0.95
  lr_warmup_steps: 0
  lr_end: 0.0005
  teacher_forcing_p: 1.0
  teacher_forcing_decay: 1.0
  teacher_forcing_warmup_steps: 10
  action_noise_std: 0.0
  action_noise_decay: 1.0
  action_reg_weight_start: 0.0
  action_reg_weight_end: 0.0
  action_reg_weight_warmup_steps: 20
  action_smoothness_reg_weight_start: 0.0
  action_smoothness_reg_weight_end: 0.0
  action_smoothness_reg_weight_warmup_steps: 20
  iterations: 150

plotting:
  render_every: 10
  prediction_animation_unroll: 50  # change back to 50 or so
  prediction_animation_step: 5

learning:
  total_steps: ${mul:${task.steps_per_iteration}, ${run.iterations}}

hydra:
  run:
    dir: ./outputs/${experiment}/${now:%Y-%m-%d}/${now:%H-%M-%S-%f}